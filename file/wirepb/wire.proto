// Copyright 2019 Michael J. Fromberger. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wirepb;

import "google/protobuf/timestamp.proto";

// A Node is the top-level container for file and directory metadata in
// persistent storage.
message Node {
  Index index = 1;

  Stat stat = 2;               // stat metadata (optional)
  repeated XAttr x_attrs = 3;  // extended attributes
  repeated Child children = 4; // child file pointers

  // next id: 5
}

// Stat records POSIX style file metadata.
message Stat {
  uint32 mode = 1;
  google.protobuf.Timestamp mod_time = 2;

  uint64 owner_id = 3;
  string owner_name = 4;

  uint64 group_id = 5;
  string group_name = 6;

  // next id: 7
}

// An Index records the size and storage locations of file data.
message Index {
  uint64 total_bytes = 1;
  repeated Extent extents = 2;
  SplitConfig split_config = 3;

  // next id: 4
}

// An Extent describes a single contiguous span of stored data.
message Extent {
  uint64 base = 1;
  uint64 bytes = 2;
  repeated Block blocks = 3;

  // next id: 4
}

// A Block describes the size and storage key of a data blob.
message Block {
  uint64 bytes = 1;
  bytes key = 2;

  // next id: 3
}

// An XAttr records the name and value of an extended attribute.
// The contents of the value are not interpreted.
message XAttr {
  string name = 1;
  bytes value = 2;

  // next id: 3
}

// A Child records the name and storage key of a child Node.
// The name is repeated to simplify path traversal.
message Child {
  string name = 1;
  bytes key = 2;

  // next id: 3
}

// A SplitConfig records the block splitter preferences.
message SplitConfig {
  int32 min = 1;  // minimum block size
  int32 size = 2; // target block size
  int32 max = 3;  // maximum block size

  // next id: 4
}

// A Root records the current state of a filesystem and its snapshots.
message Root {
  // The storage key of the current filesystem root.
  bytes key = 1;

  // Reverse time-ordered snapshots.
  repeated Snapshot snapshots = 2;

  // next id: 3

  message Snapshot {
    bytes key = 1;   // the storage key of the snapshot root
    string name = 2; // an optional human-readable label for the snapshot

    // When this snapshot was created or updated.
    google.protobuf.Timestamp snap_time = 3;
  }
}
